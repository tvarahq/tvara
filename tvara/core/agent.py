from typing import List, Optional
class Agent:
    """
    Initializes a new Agent instance.
    Args:
        name (str): The name of the agent.
        goal (str): The primary goal of the agent.
        model (str): The model used by the agent.
        description (Optional[str]): A brief description of the agent.
        tools (Optional[List[str]]): A list of tools available to the agent.
        connectors (Optional[List[str]]): A list of connectors used by the agent.
    """
    def __init__(self, name: str, goal: str, model: str, description: Optional[str] = None, tools: Optional[List[str]] = None, connectors: Optional[List[str]] = None):
        self.name = name
        self.goal = goal
        self.model = model
        self.tools = tools if tools is not None else []
        self.connectors = connectors if connectors is not None else []
        self.description = description

    def _get_system_prompt(self) -> str:
        """
        Generates a system prompt for the agent.
        Returns:
            str: The system prompt containing the agent's name, goal, model, and description.
        """
        system_prompt = f"Name: {self.name}\nGoal: {self.goal}\nModel: {self.model} Tools: {', '.join(self.tools)} Connectors: {', '.join(self.connectors)}"
        if self.description:
            system_prompt += f"\nDescription: {self.description}"
        return system_prompt
    
    def run(self, input_data: str) -> str:
        """
        Runs the agent with the provided input data.
        Args:
            input_data (str): The input data for the agent to process.
        Returns:
            str: The output generated by the agent.
        """
        system_prompt = self._get_system_prompt()
        # Here you would typically call the model with the system prompt and input data
        # For demonstration purposes, we will just return a placeholder response
        return f"Processed input: {input_data} with system prompt: {system_prompt}"